%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<< /F1 2 0 R /F2 3 0 R /F3 4 0 R /F4 8 0 R /F5 10 0 R >>
endobj
2 0 obj
<< /BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font >>
endobj
3 0 obj
<< /BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font >>
endobj
4 0 obj
<< /BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font >>
endobj
5 0 obj
<< /A << /S /URI /Type /Action /URI (https://en.wikipedia.org/wiki/Reverse_Polish_notation) >> /Border [ 0 0 0 ] /Rect [ 264.6829 476.0236 365.8329 488.0236 ] /Subtype /Link /Type /Annot >>
endobj
6 0 obj
<< /A << /S /URI /Type /Action /URI (https://stackoverflow.com/questions/39002052/how-i-can-print-to-stderr-in-c) >> /Border [ 0 0 0 ] /Rect [ 124.79 215.0236 190.7386 227.0236 ] /Subtype /Link /Type /Annot >>
endobj
7 0 obj
<< /Annots [ 5 0 R 6 0 R ] /Contents 29 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 28 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
8 0 obj
<< /BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font >>
endobj
9 0 obj
<< /Contents 30 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 28 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
10 0 obj
<< /BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font >>
endobj
11 0 obj
<< /A << /S /URI /Type /Action /URI (https://github.com/google/sanitizers/wiki/AddressSanitizer) >> /Border [ 0 0 0 ] /Rect [ 172.6628 375.0236 249.2028 387.0236 ] /Subtype /Link /Type /Annot >>
endobj
12 0 obj
<< /A << /S /URI /Type /Action /URI (http://valgrind.org/docs/manual/quick-start.html#quick-start.intro) >> /Border [ 0 0 0 ] /Rect [ 300.7428 375.0236 336.2328 387.0236 ] /Subtype /Link /Type /Annot >>
endobj
13 0 obj
<< /A << /S /URI /Type /Action /URI (https://www.youtube.com/watch?v=FNZ5o9S9prU) >> /Border [ 0 0 0 ] /Rect [ 85.69291 192.7736 252.8629 204.7736 ] /Subtype /Link /Type /Annot >>
endobj
14 0 obj
<< /A << /S /URI /Type /Action /URI (https://en.wikibooks.org/wiki/A-level_Computing/AQA/Paper_1/Fundamentals_of_data_structures/Stacks) >> /Border [ 0 0 0 ] /Rect [ 85.69291 174.7736 317.4429 186.7736 ] /Subtype /Link /Type /Annot >>
endobj
15 0 obj
<< /A << /S /URI /Type /Action /URI (https://www.youtube.com/watch?v=LQ-iW8jm6Mk) >> /Border [ 0 0 0 ] /Rect [ 85.69291 156.7736 217.4129 168.7736 ] /Subtype /Link /Type /Annot >>
endobj
16 0 obj
<< /A << /S /URI /Type /Action /URI (https://en.wikipedia.org/wiki/Shunting-yard_algorithm) >> /Border [ 0 0 0 ] /Rect [ 85.69291 138.7736 278.7729 150.7736 ] /Subtype /Link /Type /Annot >>
endobj
17 0 obj
<< /Annots [ 11 0 R 12 0 R 13 0 R 14 0 R 15 0 R 16 0 R ] /Contents 31 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 28 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
18 0 obj
<< /Outlines 20 0 R /PageLabels 32 0 R /PageMode /UseNone /Pages 28 0 R /Type /Catalog >>
endobj
19 0 obj
<< /Author () /CreationDate (D:20190204093711-01'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20190204093711-01'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title (Assignment 1: Reverse-Polish Notation) /Trapped /False >>
endobj
20 0 obj
<< /Count 7 /First 21 0 R /Last 27 0 R /Type /Outlines >>
endobj
21 0 obj
<< /Dest [ 7 0 R /XYZ 62.69291 689.0236 0 ] /Next 22 0 R /Parent 20 0 R /Title (Objectives) >>
endobj
22 0 obj
<< /Dest [ 7 0 R /XYZ 62.69291 626.0236 0 ] /Next 23 0 R /Parent 20 0 R /Prev 21 0 R /Title (Requirements) >>
endobj
23 0 obj
<< /Dest [ 7 0 R /XYZ 62.69291 389.0236 0 ] /Next 24 0 R /Parent 20 0 R /Prev 22 0 R /Title (Details on the input and output formats) >>
endobj
24 0 obj
<< /Dest [ 9 0 R /XYZ 62.69291 511.8236 0 ] /Next 25 0 R /Parent 20 0 R /Prev 23 0 R /Title (Automated Testing) >>
endobj
25 0 obj
<< /Dest [ 9 0 R /XYZ 62.69291 382.8236 0 ] /Next 26 0 R /Parent 20 0 R /Prev 24 0 R /Title (Getting started) >>
endobj
26 0 obj
<< /Dest [ 17 0 R /XYZ 62.69291 765.0236 0 ] /Next 27 0 R /Parent 20 0 R /Prev 25 0 R /Title (Grading) >>
endobj
27 0 obj
<< /Dest [ 17 0 R /XYZ 62.69291 240.0236 0 ] /Parent 20 0 R /Prev 26 0 R /Title (Reference links) >>
endobj
28 0 obj
<< /Count 3 /Kids [ 7 0 R 9 0 R 17 0 R ] /Type /Pages >>
endobj
29 0 obj
<< /Length 9245 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
BT 1 0 0 1 0 4 Tm 47.68488 0 Td 24 TL /F2 20 Tf 0 0 0 rg (Assignment 1: Reverse-Polish Notation) Tj T* -47.68488 0 Td ET
Q
Q
q
1 0 0 1 62.69291 716.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 48.03937 0 Td (Date:) Tj T* -48.03937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (February 4th 2019) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 701.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.02937 0 Td (Deadline:) Tj T* -28.02937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (February 12th 2019 23:59) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 668.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Objectives) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 638.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .127318 Tw (You must implement a stack API and a conversion program that converts between two notational systems) Tj T* 0 Tw (for mathematical expressions.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 605.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Requirements) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 539.0236 cm
q
BT 1 0 0 1 0 50 Tm 1.459985 Tw 12 TL /F1 10 Tf 0 0 0 rg (You should implement the stack API described in the ) Tj /F3 10 Tf 0 0 0 rg (stack.h ) Tj /F1 10 Tf 0 0 0 rg (file. This data structure has not been) Tj T* 0 Tw .566303 Tw (covered in the lectures yet, but it is easy enough to understand. Note that for this assignment the size of) Tj T* 0 Tw .280488 Tw (the stack is limited to a fixed number, which is also defined in the ) Tj /F3 10 Tf 0 0 0 rg (stack.h ) Tj /F1 10 Tf 0 0 0 rg (file. If you are unfamiliar with) Tj T* 0 Tw .772093 Tw (stacks, check out the reference links at the end of the assignment. This part of the assignment will be a) Tj T* 0 Tw (general implemenation to store integers in a stack data structure.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 497.0236 cm
q
BT 1 0 0 1 0 26 Tm 2.86436 Tw 12 TL /F1 10 Tf 0 0 0 rg (Next your should use this stack to store characters as part of an RPN conversion program. Your) Tj T* 0 Tw 1.92248 Tw (conversion program must be named ) Tj /F3 10 Tf 0 0 0 rg (infix2rpn ) Tj /F1 10 Tf 0 0 0 rg (and must accept a single mathematical expression) Tj T* 0 Tw (using infix notation on the command-line, and output the following:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 491.0236 cm
Q
q
1 0 0 1 62.69291 491.0236 cm
Q
q
1 0 0 1 62.69291 479.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (on standard output, its representation in ) Tj 0 0 .501961 rg (reverse-polish notation) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 473.0236 cm
Q
q
1 0 0 1 62.69291 461.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (then, on standard error, a summary of the stack operations needed to perform the conversion.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 461.0236 cm
Q
q
1 0 0 1 62.69291 431.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.416303 Tw (The program must terminate with exit code 1 if it encounters an invalid input, and exit code 0 when it) Tj T* 0 Tw (succeeds.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 401.0236 cm
q
BT 1 0 0 1 0 14 Tm 1.835868 Tw 12 TL /F1 10 Tf 0 0 0 rg (You must submit your work as a tarball. The command ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (tarball ) Tj /F1 10 Tf 0 0 0 rg (will create a tarball for you) Tj T* 0 Tw (named ) Tj /F3 10 Tf 0 0 0 rg (infix2rpn_submit.tar.gz) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 368.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Details on the input and output formats) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 356.0236 cm
Q
q
1 0 0 1 62.69291 356.0236 cm
Q
q
1 0 0 1 62.69291 272.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Input infix expressions are formed using the following rules:) Tj T* ET
Q
Q
q
1 0 0 1 23 63 cm
Q
q
1 0 0 1 23 63 cm
Q
q
1 0 0 1 23 51 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a non-empty sequence of decimal digits forms an expression.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 45 cm
Q
q
1 0 0 1 23 33 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (two expressions separated by a binary operator ) Tj /F3 10 Tf 0 0 0 rg (+) Tj /F1 10 Tf 0 0 0 rg ( ) Tj /F3 10 Tf 0 0 0 rg (-) Tj /F1 10 Tf 0 0 0 rg ( ) Tj /F3 10 Tf 0 0 0 rg (*) Tj /F1 10 Tf 0 0 0 rg ( ) Tj /F3 10 Tf 0 0 0 rg (/ ) Tj /F1 10 Tf 0 0 0 rg (form an expression.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (one expression between parentheses ) Tj /F3 10 Tf 0 0 0 rg (\() Tj /F1 10 Tf 0 0 0 rg ( ) Tj /F3 10 Tf 0 0 0 rg (\) ) Tj /F1 10 Tf 0 0 0 rg (forms an expression.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (spaces surrounding operators or parentheses are meaningless and can be ignored.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 266.0236 cm
Q
q
1 0 0 1 62.69291 254.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Your program must support proper precedence: ) Tj /F3 10 Tf 0 0 0 rg (3*1+2 ) Tj /F1 10 Tf 0 0 0 rg (and ) Tj /F3 10 Tf 0 0 0 rg (3*\(1+2\) ) Tj /F1 10 Tf 0 0 0 rg (are different!) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 248.0236 cm
Q
q
1 0 0 1 62.69291 236.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Output RPN expressions are a space-delimited sequence of operators and non-operators.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 230.0236 cm
Q
q
1 0 0 1 62.69291 152.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 51 cm
q
BT 1 0 0 1 0 14 Tm 3.148555 Tw 12 TL /F1 10 Tf 0 0 0 rg (On the ) Tj 0 0 .501961 rg (standard error) Tj 0 0 0 rg (, the program must print the word ") Tj /F3 10 Tf 0 0 0 rg (stats) Tj /F1 10 Tf 0 0 0 rg (" followed by three numbers) Tj T* 0 Tw (separated by spaces, in this order:) Tj T* ET
Q
Q
q
1 0 0 1 23 45 cm
Q
q
1 0 0 1 23 45 cm
Q
q
1 0 0 1 23 33 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (the total number of stack "push" operations;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the total number of stack "pop" operations;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (the ) Tj /F2 10 Tf (maximum ) Tj /F1 10 Tf (size of the stack during the conversion.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 152.0236 cm
Q
q
1 0 0 1 62.69291 134.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 88.82362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ ./infix2rpn "3+2") Tj T* (3 2 +) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
30 0 obj
<< /Length 6590 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 523.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 240 re B*
Q
q
BT 1 0 0 1 0 218 Tm 12 TL /F3 10 Tf 0 0 0 rg (stats 1 1 1) Tj T*  T* (# Exit code is 0 in case of success.) Tj T* ($ ./infix2rpn "\(3+2\)/3"; echo $?) Tj T* (3 2 + 3 /) Tj T* (stats 3 3 2) Tj T* (0) Tj T*  T* (# Results go to stdout.) Tj T* ($ ./infix2rpn "\(3+2\)/3"  2) Tj (>) Tj ( /dev/null) Tj T* (3 2 + 3 /) Tj T*  T* (# Stats go to stderr.) Tj T* ($ ./infix2rpn "\(3+2\)/3"  ) Tj (>) Tj ( /dev/null) Tj T* (stats 3 3 2) Tj T*  T* (# Checking that the exit status is correct in case of error) Tj T* ($ ./infix2rpn "blabla"  ) Tj (>) Tj ( /dev/null 2) Tj (>) Tj (&) Tj (1; echo $?) Tj T* (1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 490.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Automated Testing) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 436.8236 cm
q
BT 1 0 0 1 0 38 Tm .988735 Tw 12 TL /F1 10 Tf 0 0 0 rg (The correctness of your programs will be determined by automatic grading scripts. To help you get you) Tj T* 0 Tw .955488 Tw (get used to this, part of the scripts for this week have also been provided. You can test your stack with) Tj T* 0 Tw 2.464269 Tw /F3 10 Tf 0 0 0 rg (check_stack.c) Tj /F1 10 Tf 0 0 0 rg (, which contains a set of testcases for just the data structure functions. The script) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (grade_infix2rpn.sh ) Tj /F1 10 Tf 0 0 0 rg (contains some the grading check that will be run on your code.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 394.8236 cm
q
BT 1 0 0 1 0 26 Tm .731654 Tw 12 TL /F1 10 Tf 0 0 0 rg (The command ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (check ) Tj /F1 10 Tf 0 0 0 rg (will run all these tests in order. Note that only half of the requirements are) Tj T* 0 Tw 2.797318 Tw (tested here, and you should add your own tests in ) Tj /F3 10 Tf 0 0 0 rg (test_expressions.sh ) Tj /F1 10 Tf 0 0 0 rg (in order to verify all) Tj T* 0 Tw (elements of your program function correctly.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 361.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Getting started) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 349.8236 cm
Q
q
1 0 0 1 62.69291 349.8236 cm
Q
q
1 0 0 1 62.69291 337.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Unpack the provided source code archive; then run ) Tj /F3 10 Tf 0 0 0 rg (make) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 331.8236 cm
Q
q
1 0 0 1 62.69291 319.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Try out the generated ) Tj /F3 10 Tf 0 0 0 rg (infix2rpn ) Tj /F1 10 Tf 0 0 0 rg (and understand how input expressions are provided.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 313.8236 cm
Q
q
1 0 0 1 62.69291 301.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Read the file ) Tj /F3 10 Tf 0 0 0 rg (stack.h ) Tj /F1 10 Tf 0 0 0 rg (and study the interface of functions listed there.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 295.8236 cm
Q
q
1 0 0 1 62.69291 283.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Implement the data structure in ) Tj /F3 10 Tf 0 0 0 rg (stack.c ) Tj /F1 10 Tf 0 0 0 rg (according to the interface description.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 277.8236 cm
Q
q
1 0 0 1 62.69291 253.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.419984 Tw 12 TL /F1 10 Tf 0 0 0 rg (Run ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (check ) Tj /F1 10 Tf 0 0 0 rg (to see if your stack implementation is correct. Reproduce errors found by the) Tj T* 0 Tw (tests \(you can view the code from each test in ) Tj /F3 10 Tf 0 0 0 rg (check_stack.c) Tj /F1 10 Tf 0 0 0 rg (\) and fix your stack where needed.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 247.8236 cm
Q
q
1 0 0 1 62.69291 235.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Implement the conversion algorithm in ) Tj /F3 10 Tf 0 0 0 rg (infix2rpn.c ) Tj /F1 10 Tf 0 0 0 rg (and test this with ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (check ) Tj /F1 10 Tf 0 0 0 rg (too.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 229.8236 cm
Q
q
1 0 0 1 62.69291 205.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .002651 Tw 12 TL /F1 10 Tf 0 0 0 rg (Add tests to ) Tj /F3 10 Tf 0 0 0 rg (test_expressions.sh ) Tj /F1 10 Tf 0 0 0 rg (and check the parts of the assignment that are not covered in) Tj T* 0 Tw (the provided grading script.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 205.8236 cm
Q
q
1 0 0 1 62.69291 193.8236 cm
Q
q
1 0 0 1 62.69291 86.82362 cm
.960784 .960784 .862745 rg
n 0 107 469.8898 -107 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 81 Tm  T* ET
q
1 0 0 1 16 76 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Hint) Tj T* ET
Q
Q
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.529986 Tw (You will not need to analyze numbers or determine the value of each number on the input. Of) Tj T* 0 Tw .025542 Tw (course, you can do this, but it is not needed to achieve a correct solution. The simple algorithm can) Tj T* 0 Tw .13186 Tw (look at characters individually and then forget about them. Check the links referenced at the end of) Tj T* 0 Tw (the assignment!) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 107 m 469.8898 107 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 107 l S
n 469.8898 0 m 469.8898 107 l S
Q
Q
q
1 0 0 1 62.69291 80.82362 cm
Q
 
endstream
endobj
31 0 obj
<< /Length 11498 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Grading) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 726.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Your grade starts from 0, and the following tests determine your grade:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 720.0236 cm
Q
q
1 0 0 1 62.69291 720.0236 cm
Q
q
1 0 0 1 62.69291 696.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .377045 Tw 12 TL /F1 10 Tf 0 0 0 rg (+1pt if you have submitted an archive in the right format, your source code builds without errors and) Tj T* 0 Tw (you have modified both ) Tj /F3 10 Tf 0 0 0 rg (stack.c ) Tj /F1 10 Tf 0 0 0 rg (and ) Tj /F3 10 Tf 0 0 0 rg (infix2rpn.c ) Tj /F1 10 Tf 0 0 0 rg (in any way.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 690.0236 cm
Q
q
1 0 0 1 62.69291 666.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.275697 Tw (+1pt if your stack API processes pushes and pops properly and detects stack overflow and) Tj T* 0 Tw (underflow situations.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 660.0236 cm
Q
q
1 0 0 1 62.69291 636.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.159213 Tw (+1.5pt if your converter processes expressions of any length, without parentheses and a single) Tj T* 0 Tw (precedence level, properly.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 630.0236 cm
Q
q
1 0 0 1 62.69291 606.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.03498 Tw (+1pt if your converter processes expressions of any length, without parentheses and multiple) Tj T* 0 Tw (precedence levels, properly.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 600.0236 cm
Q
q
1 0 0 1 62.69291 588.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+0.5pt if your converter detects invalid characters properly and reports a correct exit code.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 582.0236 cm
Q
q
1 0 0 1 62.69291 570.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (-1pt if code produces any warning using the flags ) Tj /F3 10 Tf 0 0 0 rg (-Wpedantic) Tj ( ) Tj (-Wall) Tj ( ) Tj (-Wextra ) Tj /F1 10 Tf 0 0 0 rg (when compiling.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 570.0236 cm
Q
q
1 0 0 1 62.69291 540.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.956654 Tw (And the following features are not included in the provided tests at all. You will have to validate the) Tj T* 0 Tw (correctness of these yourself by writing your own tests.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 534.0236 cm
Q
q
1 0 0 1 62.69291 534.0236 cm
Q
q
1 0 0 1 62.69291 522.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+1pt if your stack API counts ) Tj /F2 10 Tf (valid ) Tj /F1 10 Tf (operations properly \(number of pushes, pops and max. size\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 516.0236 cm
Q
q
1 0 0 1 62.69291 504.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+0.5pt if your converter properly ignores spaces in the input expressions.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 498.0236 cm
Q
q
1 0 0 1 62.69291 486.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+1pt if your converter processes all expressions including parentheses properly.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 480.0236 cm
Q
q
1 0 0 1 62.69291 468.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+0.5pt if your converter detects improperly matched parentheses and reports a correct exit code.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 462.0236 cm
Q
q
1 0 0 1 62.69291 426.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm 1.599147 Tw 12 TL /F1 10 Tf 0 0 0 rg (+1pt if your converter also supports ) Tj /F5 10 Tf (right-associative ) Tj /F1 10 Tf (exponentiation at a higher precedence level) Tj T* 0 Tw 2.219213 Tw (than multiplication, that is, ) Tj /F3 10 Tf 0 0 0 rg (2*2^3^4 ) Tj /F1 10 Tf 0 0 0 rg (is an expression and is equivalent to ) Tj /F3 10 Tf 0 0 0 rg (2*\(2^\(3^4\)\)) Tj /F1 10 Tf 0 0 0 rg (, and) Tj T* 0 Tw (converts it appropriately.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 420.0236 cm
Q
q
1 0 0 1 62.69291 396.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 3.196412 Tw 12 TL /F1 10 Tf 0 0 0 rg (+1pt if your converter also supports ) Tj /F5 10 Tf (unary negation ) Tj /F1 10 Tf (in front of simple numbers and grouped) Tj T* 0 Tw (expressions using the symbol ) Tj /F3 10 Tf 0 0 0 rg (~ ) Tj /F1 10 Tf 0 0 0 rg (\(not ") Tj /F3 10 Tf 0 0 0 rg (-) Tj /F1 10 Tf 0 0 0 rg ("!\), for example ) Tj /F3 10 Tf 0 0 0 rg (~123 ) Tj /F1 10 Tf 0 0 0 rg (or ) Tj /F3 10 Tf 0 0 0 rg (~\(3+2\)) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 390.0236 cm
Q
q
1 0 0 1 62.69291 366.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .479983 Tw 12 TL /F1 10 Tf 0 0 0 rg (-1pt if enabling the ) Tj 0 0 .501961 rg (address sanitizer ) Tj 0 0 0 rg (or running ) Tj 0 0 .501961 rg (valgrind ) Tj 0 0 0 rg (reports errors while running your converter.) Tj T* 0 Tw /F5 10 Tf (Note that you cannot test both of these at the same time.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 366.0236 cm
Q
q
1 0 0 1 62.69291 348.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Summary of operators and precedence levels) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 342.0236 cm
Q
q
1 0 0 1 62.69291 252.0236 cm
1 1 1 rg
n 0 90 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 72 469.8898 -18 re f*
1 1 1 rg
n 0 54 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 36 469.8898 -18 re f*
1 1 1 rg
n 0 18 469.8898 -18 re f*
.960784 .960784 .862745 rg
n 0 90 469.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
.960784 .960784 .862745 rg
n 0 0 92.41995 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 19.52997 0 Td (Precedence) Tj T* -19.52997 0 Td ET
Q
Q
q
1 0 0 1 110.4199 75 cm
q
.960784 .960784 .862745 rg
n 0 0 222.9449 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 91.74244 0 Td (Operator) Tj T* -91.74244 0 Td ET
Q
Q
q
1 0 0 1 345.3648 75 cm
q
.960784 .960784 .862745 rg
n 0 0 118.5249 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 31.75747 0 Td (Associativity) Tj T* -31.75747 0 Td ET
Q
Q
0 0 0 rg
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 110.4199 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Negation) Tj T* ET
Q
Q
q
1 0 0 1 345.3648 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Right) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 110.4199 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Exponentiation) Tj T* ET
Q
Q
q
1 0 0 1 345.3648 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Right) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 110.4199 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Division and multiplication) Tj T* ET
Q
Q
q
1 0 0 1 345.3648 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Left) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 0 0 1 110.4199 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Addition and substraction) Tj T* ET
Q
Q
q
1 0 0 1 345.3648 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Left) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 72 m 469.8898 72 l S
n 0 54 m 469.8898 54 l S
n 0 36 m 469.8898 36 l S
n 0 18 m 469.8898 18 l S
n 104.4199 0 m 104.4199 90 l S
n 339.3648 0 m 339.3648 90 l S
n 0 90 m 469.8898 90 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 90 l S
n 469.8898 0 m 469.8898 90 l S
Q
Q
q
1 0 0 1 62.69291 252.0236 cm
Q
q
1 0 0 1 62.69291 219.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Reference links) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 207.0236 cm
Q
q
1 0 0 1 62.69291 207.0236 cm
Q
q
1 0 0 1 62.69291 195.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Video "What is a stack data structure") Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 189.0236 cm
Q
q
1 0 0 1 62.69291 177.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Wikibook - Fundamentals of data structures - Stacks) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 171.0236 cm
Q
q
1 0 0 1 62.69291 159.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Infix to postfix algorithm video) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 153.0236 cm
Q
q
1 0 0 1 62.69291 141.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Dijkstra's shunting-yard algorithm explained) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 141.0236 cm
Q
 
endstream
endobj
32 0 obj
<< /Nums [ 0 33 0 R 1 34 0 R 2 35 0 R ] >>
endobj
33 0 obj
<< /S /D /St 1 >>
endobj
34 0 obj
<< /S /D /St 2 >>
endobj
35 0 obj
<< /S /D /St 3 >>
endobj
xref
0 36
0000000000 65535 f
0000000075 00000 n
0000000150 00000 n
0000000260 00000 n
0000000375 00000 n
0000000483 00000 n
0000000691 00000 n
0000000919 00000 n
0000001152 00000 n
0000001274 00000 n
0000001483 00000 n
0000001602 00000 n
0000001816 00000 n
0000002038 00000 n
0000002237 00000 n
0000002491 00000 n
0000002690 00000 n
0000002899 00000 n
0000003163 00000 n
0000003272 00000 n
0000003571 00000 n
0000003648 00000 n
0000003762 00000 n
0000003891 00000 n
0000004047 00000 n
0000004181 00000 n
0000004313 00000 n
0000004438 00000 n
0000004558 00000 n
0000004634 00000 n
0000013936 00000 n
0000020583 00000 n
0000032139 00000 n
0000032201 00000 n
0000032238 00000 n
0000032275 00000 n
trailer
<< /ID 
 % ReportLab generated PDF document -- digest (http://www.reportlab.com)
 [(W\333H\350\266\021M&\300\306\233\370\216\021\357$) (W\333H\350\266\021M&\300\306\233\370\216\021\357$)]
 /Info 19 0 R /Root 18 0 R /Size 36 >>
startxref
32312
%%EOF
